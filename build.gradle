plugins {
    id "java"
    id "jacoco"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.sonarqube" version "3.1.1"
    id 'info.solidsoft.pitest' version '1.6.0'
}

apply plugin: "java-library"
apply plugin: "maven"
apply plugin: "signing"

ext {
    springBootVersion = '3.0.4'
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    testIntegration {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDir file('src/testIntegration/java')
        }
    }
}

configurations {
    testIntegrationImplementation.extendsFrom implementation, testImplementation
    testIntegrationRuntime.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
}

group = "com.github.mikesafonov"
version "1.4.0"

jar {
    enabled = true
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    api("org.restcomm.smpp:ch-commons-util:7.0.6")
    api("org.restcomm.smpp:ch-commons-charset:7.0.6")
    api("org.restcomm.smpp:ch-commons-gsm:7.0.6")
    api("org.restcomm.smpp:ch-smpp:5.1.0-113")

    implementation("javax.validation:validation-api:2.0.1.Final")

    compileOnly("org.projectlombok:lombok:1.18.18")
    annotationProcessor("org.projectlombok:lombok:1.18.18")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    testCompileOnly("org.projectlombok:lombok:1.18.18")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.18")

    testImplementation("org.assertj:assertj-core:3.19.0")

    testImplementation("com.devskiller:jfairy:0.6.4")
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testIntegrationImplementation platform("org.springframework.cloud:spring-cloud-dependencies:2020.0.2")
    testIntegrationImplementation("org.springframework.cloud:spring-cloud-starter")
    testIntegrationImplementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    testIntegrationImplementation("org.awaitility:awaitility:4.0.3")
    testIntegrationImplementation("com.github.mikesafonov:smpp-server-mock-assertj:1.5.0")
    testIntegrationImplementation("com.github.mikesafonov:smpp-server-mock-junit:1.5.0")
    testIntegrationImplementation("com.github.mikesafonov:smpp-server-mock-spring-boot:1.5.0")

    testIntegrationCompileOnly("org.projectlombok:lombok:1.18.10")
    testIntegrationAnnotationProcessor("org.projectlombok:lombok:1.18.10")
    testIntegrationImplementation('org.springframework.boot:spring-boot-starter-test')
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

jacoco{
    toolVersion = "0.8.3"
}

jacocoTestReport{
    reports {
        xml.enabled = true
        csv.enabled = false
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task testIntegration(type: Test){
    useJUnitPlatform()
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

pitest {
    junit5PluginVersion = '0.12'
    targetClasses = ['com.github.mikesafonov.smpp.*']
    excludedClasses = ['com.github.mikesafonov.smpp.config.SmppAutoConfiguration']
    threads = 4
    outputFormats = ['HTML', 'XML']
    enableDefaultIncrementalAnalysis = true
    timestampedReports = false
    historyInputLocation = ".pitest/pitHistory.txt"
    historyOutputLocation = ".pitest/pitHistory.txt"
}


// Build, sign, and upload
uploadArchives {
    repositories {
        mavenDeployer {

            // Sign POM
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // Destination
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            // Add required metadata to POM
            pom.project {
                name "spring-boot-starter-smpp"
                packaging "jar"
                description "Spring Boot starter for building specifications in declarative way"
                url "https://github.com/MikeSafonov/spring-boot-starter-smpp"
                organization {
                    name "com.github.mikesafonov"
                    url "https://github.com/MikeSafonov"
                }
                issueManagement {
                    system "GitHub"
                    url "https://github.com/MikeSafonov/spring-boot-starter-smpp/issues"
                }
                licenses {
                    license {
                        name "MIT"
                        url "https://github.com/MikeSafonov/spring-boot-starter-smpp/blob/master/LICENSE"
                        distribution "repo"
                    }
                }
                scm {
                    url "https://github.com/MikeSafonov/spring-boot-starter-smpp"
                    connection "scm:git:git://github.com/MikeSafonov/spring-boot-starter-smpp.git"
                    developerConnection "scm:git:ssh://git@github.com:MikeSafonov/spring-boot-starter-smpp.git"
                }
                developers {
                    developer {
                        name "Mike Safonov"
                        organization "com.github.mikesafonov"
                        organizationUrl "https://github.com/MikeSafonov"
                    }
                }
            }
        }
    }
}
